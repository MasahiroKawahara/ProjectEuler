# -*- coding: utf-8 -*-
# 1から始めて, 以下のように反時計回りに数字を並べていくと, 辺の長さが7の渦巻きが形成される.

# 37	36	35	34	33	32	31
# 38	17	16	15	14	13	30
# 39	18	5	4	3	12	29
# 40	19	6	1	2	11	28
# 41	20	7	8	9	10	27
# 42	21	22	23	24	25	26
# 43	44	45	46	47	48	49

# 面白いことに, 奇平方数が右下の対角線上に出現する. もっと面白いことには, 対角線上の13個の数字のうち, 8個が素数である. ここで割合は8/13 ≈ 62%である.

# 渦巻きに新しい層を付け加えよう. すると辺の長さが9の渦巻きが出来る. 以下, この操作を繰り返していく. 対角線上の素数の割合が10%未満に落ちる最初の辺の長さを求めよ.

require 'prime'

def main
  #初期条件, 辺の長さ 7, 素数の個数 8
  side = 7
  num_prime = 8
  while true
    side += 2 #渦巻きを作ると辺の長さは +2 される．
    n1 = side*side - 3*(side - 1) #右上
    n2 = side*side - 2*(side - 1) #左上
    n3 = side*side - 1*(side - 1) #左下
    #右下は平方数なので，素数でない．
    num_prime += [n1,n2,n3].select{|n| Prime.prime?(n)}.size
    
    rate = 100*num_prime/(2*side - 1)
    if rate < 10
      break
    end
  end
  puts side
end

main
