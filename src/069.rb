# -*- coding: utf-8 -*-

# オイラーのトーティエント関数, φ(n) [時々ファイ関数とも呼ばれる]は, n と互いに素な n 未満の数の数を定める. たとえば, 1, 2, 4, 5, 7, そして8はみな9未満で9と互いに素であり, φ(9)=6.

# n ≤ 10 では n/φ(n) の最大値は n=6 であることがわかる.

# n ≤ 1,000,000で n/φ(n) が最大となる値を見つけよ.

### メモ
# オイラーのファイ関数(トーシェント関数)：
# 自然数n に対して，1 からn までの自然数の中でn と互いに素なものの数Φ(n) は，
# Φ(n)=n * Π(i=1..k) [(1−1/(p_i))]
# ただし，p_i は n の素因数。
# (http://mathtrain.jp/phiより)

#...らしいので，n/φ(n) = 1 / {Π(i=1..k) [(1−1/(p_i))]} を最大に，
#つまりΠ(i=1..k) [(1−1/(p_i))] を最小にするようなn を探す．
# => 1000000以下のX の中で素因数が一番多くなるXが求める値．
# => 小さい素数から順番に掛けあわせて，1000000 に最も近くなる値を求める．

require 'prime'

MAX = 1000000

BOUND = 1000 #素数リストの最大値

def main
  x = 1
  Prime.each(BOUND).each{|p|
    xn = x*p
    if xn > MAX
     puts x
     break
    end
    x = xn
  }
end

main
